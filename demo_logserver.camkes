import <std_connector.camkes>;


import "components/log_server/LOG_SERVER.camkes";
import "components/time_server/TIME_SERVER.camkes";
import "components/app01/APP01.camkes";
import "components/app02/APP02.camkes";
import "components/app03/APP03.camkes";
import "components/app0x/APP0x.camkes";
import "components/partition_manager/PARTITION_MANAGER.camkes";
import "components/ChanMux/ChanMux.camkes";
import "components/Uart/Uart.camkes";


assembly {
    composition {
        component LOG_SERVER        log_server;
        component TIMEBASE          timebase;
        component TIME_SERVER       time_server;
        component APP01             app01;
        component APP02             app02;
        component APP03             app03;
        component APP0x             app0x;
        component PARTITION_MANAGER partition_manager;
        component ChanMux	    chanMux;
        component UartDev	    uartDev;
        component UartDrv	    uartDrv;

        //----------------------------------------------------------------------
        // TIME SERVER configuration
        //----------------------------------------------------------------------
        connection seL4HardwareMMIO      time_server_mem(from time_server.reg, to timebase.reg);
        connection seL4HardwareInterrupt time_server_irq_ticks(from timebase.irq_ticks, to time_server.irq_ticks);
        connection seL4HardwareInterrupt time_server_irq_sleep(from timebase.irq_sleep, to time_server.irq_sleep);

        //----------------------------------------------------------------------
        // TIME CLIENT configuration
        //----------------------------------------------------------------------
        connection seL4RPCCall  log_server_2_time_server(from log_server.api_time_server, to time_server.api_time_server);

        //----------------------------------------------------------------------
        // LOG SERVER connections
        //----------------------------------------------------------------------
        connection  seL4RPCCall         conn_rpc_logServer2app01(from app01.log_server_interface, to log_server.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app02(from app02.log_server_interface, to log_server.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app03(from app03.log_server_interface, to log_server.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app0x(from app0x.log_server_interface, to log_server.log_server_interface);

        connection  seL4Notification    conn_dataAvailable_logServer2app01(from log_server.logServer_ready, to app01.logServer_ready);
        connection  seL4Notification    conn_dataAvailable_logServer2app02(from log_server.logServer_ready, to app02.logServer_ready);
        connection  seL4Notification    conn_dataAvailable_logServer2app03(from log_server.logServer_ready, to app03.logServer_ready);
        // seL4Notification unused in application app0x
        connection  seL4Notification    conn_dataAvailable_logServer2app0x_finish(from log_server.logServer_finish, to app0x.logServer_finish);

        connection  seL4SharedData      conn_dataConnection_app01(from app01.dataport_buf, to log_server.dataport_buf_app01);
        connection  seL4SharedData      conn_dataConnection_app02(from app02.dataport_buf, to log_server.dataport_buf_app02);
        connection  seL4SharedData      conn_dataConnection_app03(from app03.dataport_buf, to log_server.dataport_buf_app03);
        connection  seL4SharedData      conn_dataConnection_app0x(from app0x.dataport_buf, to log_server.dataport_buf_app0x);

        //----------------------------------------------------------------------
        // PARTITION MANAGER connections
        //----------------------------------------------------------------------
        connection  seL4RPCCall     interface_partition_manager2log_server(from log_server.api_pm_component, to partition_manager.api_pm_component);
        connection  seL4SharedData  dataport_interface_partition_manager2log_server(from log_server.pm_dataport_buf, to partition_manager.pm_dataport_buf);

        //----------------------------------------------------------------------
        // ChanMux, UART connections
        //----------------------------------------------------------------------
        connection  seL4RPCCall     partition_manager_chanmux(from partition_manager.ChanMuxRpc, to chanMux.ChanMuxIn);
        connection  seL4RPCCall     chanmux_uart(from chanMux.Output, to uartDrv.UartDrv);
        connection  seL4RPCCall     uart_chanmux(from uartDrv.Output, to chanMux.ChanMuxOut);

        connection  seL4SharedData  uart_dataConnection(from chanMux.outputDataPort, to uartDrv.inputDataPort);
        connection  seL4SharedData  dataConnection(from partition_manager.chanMuxDataPort, to chanMux.client_dataport_buf);

        connection  seL4Notification dataAvailableLan(from chanMux.dataAvailable_client, to partition_manager.ChanMuxSignal_dataAvailable);

        connection  seL4HardwareMMIO uart_memio(from uartDrv.uartRegBase, to uartDev.uartRegBase);
    }
    configuration {
        // client id's
        app01.log_server_interface_attributes = 10;
        app02.log_server_interface_attributes = 200;
        app03.log_server_interface_attributes = 3000;
        app0x.log_server_interface_attributes = 40000;

        // timer
        timebase.reg_paddr = 0xF8001000;    // paddr of mmio registers
        timebase.reg_size = 0x1000;         // size of mmio registers
        timebase.irq_ticks_irq_number = 42; // time_server irq number
        timebase.irq_sleep_irq_number = 43; // time_server irq number
        // assign an initial value to semaphore
        time_server.sem_ticks_value = 0;
        time_server.sem_sleep_value = 0;

        // UART
        uartDev.uartRegBase_paddr  = 0xE0000000;
        uartDev.uartRegBase_size   = 0x1000;
        uartDrv.inputDataPort       = "R";
    }
}
