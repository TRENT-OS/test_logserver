import <std_connector.camkes>;

// Clients
import "components/log_clients/FileReaderWriter/FileReaderWriter.camkes";
import "components/log_clients/LogFileReader/LogFileReader.camkes";
import "components/log_clients/LogsAllLevels/LogsAllLevels.camkes";
import "components/log_clients/SendsIllFormattedString/SendsIllFormattedString.camkes";

// Server
import "components/LogServer/LogServer.camkes";

// Test Fixture
import "components/test_fixture/time_server/time_server.camkes";
import "components/test_fixture/partition_manager/partition_manager.camkes";

#include "system_config.h"

#include "UART/uart.camkes"
DECLARE_COMPONENT_UART(UART)

#define CHANMUX_COMPONENT_NAME  ChanMux
#define CHANMUX_UPPER_INTERFACES "components/test_fixture/ChanMux/ChanMux_upper_interface.camkes"
#include "ChanMux/ChanMux.camkes"


assembly {
    composition {

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component   TimerDev               timerDev;
        component   TimeServer             time_server;

        connection  seL4HardwareMMIO       time_server_mem(from time_server.reg, to timerDev.reg);
        connection  seL4HardwareInterrupt  time_server_irq_ticks(from timerDev.irq_ticks, to time_server.irq_ticks);
        connection  seL4HardwareInterrupt  time_server_irq_sleep(from timerDev.irq_sleep, to time_server.irq_sleep);


        //----------------------------------------------------------------------
        // UART connections
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_UART(
            UART, uartDrv)


        //----------------------------------------------------------------------
        // ChanMux connections
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_CHANMUX_TO_UART(ChanMux, chanMux, uartDrv)

        //----------------------------------------------------------------------
        // PartitionManager connections
        //----------------------------------------------------------------------
        component   PartitionManager       partition_manager;

        connection  seL4RPCCall            partition_manager_chanmux(from partition_manager.chanMux_rpc, to chanMux.chanMux_rpc);
        connection  seL4SharedData         dataConnection(from partition_manager.chanMux_port, to chanMux.pm_port);
        connection  seL4Notification       dataAvailableLan(from chanMux.pm_event_hasData, to partition_manager.chanMux_event_hasData);


        //----------------------------------------------------------------------
        // LogServer
        //----------------------------------------------------------------------
        component   LogServer              logServer;

        connection  seL4RPCCall            logServer_2_time_server(from logServer.api_time_server, to time_server.api_time_server);

        connection  seL4RPCCall            interface_partition_manager2logServer(from logServer.api_pm_component, to partition_manager.api_pm_component);
        connection  seL4SharedData         dataport_interface_partition_manager2logServer(from logServer.pm_dataport_buf, to partition_manager.logServer_port);


        //----------------------------------------------------------------------
        // FileReaderWriter Client
        //----------------------------------------------------------------------
        component   FileReaderWriter       fileReaderWriter;

        connection  seL4RPCCall            interface_partition_manager2fileReaderWriter(from fileReaderWriter.api_pm_component, to partition_manager.api_pm_component);
        connection  seL4SharedData         dataport_interface_partition_manager2fileReaderWriter(from fileReaderWriter.pm_dataport_buf, to partition_manager.fileReaderWriter_port);

        connection  seL4RPCCall            conn_rpc_logServer2fileReaderWriter(     from fileReaderWriter.log_server_interface,      to logServer.log_server_interface);


        //----------------------------------------------------------------------
        // LogFileReader Client
        //----------------------------------------------------------------------
        component   LogFileReader          logFileReader;

        connection  seL4RPCCall            conn_rpc_logServer2logFileReader(        from logFileReader.log_server_interface,         to logServer.log_server_interface);


        //----------------------------------------------------------------------
        // Test Apps
        //----------------------------------------------------------------------

        component SendsIllFormattedString sendsIllFormattedString;
        connection  seL4RPCCall         conn_rpc_logServer2sendsIllFormattedString(from sendsIllFormattedString.log_server_interface,      to logServer.log_server_interface);

        component LogsAllLevels     app_lvl_none;
        component LogsAllLevels     app_lvl_assert;
        component LogsAllLevels     app_lvl_fatal;
        component LogsAllLevels     app_lvl_error;
        component LogsAllLevels     app_lvl_warning;
        component LogsAllLevels     app_lvl_info;
        component LogsAllLevels     app_lvl_debug;
        component LogsAllLevels     app_lvl_trace;
        component LogsAllLevels     app_lvl_custom;
        component LogsAllLevels     app_lvl_max;

        component LogsAllLevels     app_no_filters;

        component LogsAllLevels     app_cl_filter_none;
        component LogsAllLevels     app_cl_filter_assert;
        component LogsAllLevels     app_cl_filter_fatal;
        component LogsAllLevels     app_cl_filter_error;
        component LogsAllLevels     app_cl_filter_warning;
        component LogsAllLevels     app_cl_filter_info;
        component LogsAllLevels     app_cl_filter_debug;
        component LogsAllLevels     app_cl_filter_trace;
        component LogsAllLevels     app_cl_filter_custom;


        // seL4RPCCall
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_none(   from app_lvl_none.log_server_interface,    to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_assert( from app_lvl_assert.log_server_interface,  to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_fatal(  from app_lvl_fatal.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_error(  from app_lvl_error.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_warning(from app_lvl_warning.log_server_interface, to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_info(   from app_lvl_info.log_server_interface,    to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_debug(  from app_lvl_debug.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_trace(  from app_lvl_trace.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_custom( from app_lvl_custom.log_server_interface,  to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_lvl_max(    from app_lvl_max.log_server_interface,     to logServer.log_server_interface);

        connection  seL4RPCCall         conn_rpc_logServer2app_no_filters( from app_no_filters.log_server_interface,  to logServer.log_server_interface);

        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_none(   from app_cl_filter_none.log_server_interface,    to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_assert( from app_cl_filter_assert.log_server_interface,  to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_fatal(  from app_cl_filter_fatal.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_error(  from app_cl_filter_error.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_warning(from app_cl_filter_warning.log_server_interface, to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_info(   from app_cl_filter_info.log_server_interface,    to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_debug(  from app_cl_filter_debug.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_trace(  from app_cl_filter_trace.log_server_interface,   to logServer.log_server_interface);
        connection  seL4RPCCall         conn_rpc_logServer2app_cl_filter_custom( from app_cl_filter_custom.log_server_interface,  to logServer.log_server_interface);

        connection  seL4RPCCall         conn_rpc_logServer2chanmux(              from chanMux.log_server_interface,               to logServer.log_server_interface);


        // seL4Notification
        connection  seL4Notification    conn_dataAvailable_logServer2logFileReader_finish( from logServer.logServer_finish, to logFileReader.logServer_finish);
        connection  seL4Notification    conn_finished_app_lvl_max2sendsIllFormattedString(from app_lvl_max.done, to sendsIllFormattedString.ready);

        // seL4SharedData
        connection  seL4SharedData      conn_dataConnection_app_lvl_none(   from app_lvl_none.logServer_buf,    to logServer.dataport_buf_lvl_none);
        connection  seL4SharedData      conn_dataConnection_app_lvl_assert( from app_lvl_assert.logServer_buf,  to logServer.dataport_buf_lvl_assert);
        connection  seL4SharedData      conn_dataConnection_app_lvl_fatal(  from app_lvl_fatal.logServer_buf,   to logServer.dataport_buf_lvl_fatal);
        connection  seL4SharedData      conn_dataConnection_app_lvl_error(  from app_lvl_error.logServer_buf,   to logServer.dataport_buf_lvl_error);
        connection  seL4SharedData      conn_dataConnection_app_lvl_warning(from app_lvl_warning.logServer_buf, to logServer.dataport_buf_lvl_warning);
        connection  seL4SharedData      conn_dataConnection_app_lvl_info(   from app_lvl_info.logServer_buf,    to logServer.dataport_buf_lvl_info);
        connection  seL4SharedData      conn_dataConnection_app_lvl_debug(  from app_lvl_debug.logServer_buf,   to logServer.dataport_buf_lvl_debug);
        connection  seL4SharedData      conn_dataConnection_app_lvl_trace(  from app_lvl_trace.logServer_buf,   to logServer.dataport_buf_lvl_trace);
        connection  seL4SharedData      conn_dataConnection_app_lvl_custom( from app_lvl_custom.logServer_buf,  to logServer.dataport_buf_lvl_custom);
        connection  seL4SharedData      conn_dataConnection_app_lvl_max(    from app_lvl_max.logServer_buf,     to logServer.dataport_buf_lvl_max);

        connection  seL4SharedData      conn_dataConnection_app_no_filters( from app_no_filters.logServer_buf,  to logServer.dataport_buf_no_filters);

        connection  seL4SharedData      conn_dataConnection_app_cl_filter_none(   from app_cl_filter_none.logServer_buf,    to logServer.dataport_buf_cl_filter_none);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_assert( from app_cl_filter_assert.logServer_buf,  to logServer.dataport_buf_cl_filter_assert);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_fatal(  from app_cl_filter_fatal.logServer_buf,   to logServer.dataport_buf_cl_filter_fatal);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_error(  from app_cl_filter_error.logServer_buf,   to logServer.dataport_buf_cl_filter_error);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_warning(from app_cl_filter_warning.logServer_buf, to logServer.dataport_buf_cl_filter_warning);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_info(   from app_cl_filter_info.logServer_buf,    to logServer.dataport_buf_cl_filter_info);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_debug(  from app_cl_filter_debug.logServer_buf,   to logServer.dataport_buf_cl_filter_debug);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_trace(  from app_cl_filter_trace.logServer_buf,   to logServer.dataport_buf_cl_filter_trace);
        connection  seL4SharedData      conn_dataConnection_app_cl_filter_custom( from app_cl_filter_custom.logServer_buf,  to logServer.dataport_buf_cl_filter_custom);

        connection  seL4SharedData      conn_dataConnection_logFileReader(from logFileReader.dataport_buf, to logServer.dataport_buf_logFileReader);
        connection  seL4SharedData      conn_dataConnection_fileReaderWriter(from fileReaderWriter.dataport_buf, to logServer.dataport_buf_fileReaderWriter);

        connection  seL4SharedData      conn_dataConnection_sendsIllFormattedString(from sendsIllFormattedString.logServer_buf, to logServer.dataport_buf_sendsIllFormattedString);

        connection  seL4SharedData      conn_dataConnection_chanMux(from chanMux.logServer_buf, to logServer.dataport_buf_chanMux);
    }
    configuration {

        app_lvl_none.log_server_interface_attributes          = 10;
        app_lvl_assert.log_server_interface_attributes        = 200;
        app_lvl_fatal.log_server_interface_attributes         = 3000;
        app_lvl_error.log_server_interface_attributes         = 40000;
        app_lvl_warning.log_server_interface_attributes       = 500000;
        app_lvl_info.log_server_interface_attributes          = 6000000;
        app_lvl_debug.log_server_interface_attributes         = 0xFFFF - 1;
        app_lvl_trace.log_server_interface_attributes         = 0xFFFF;
        app_lvl_custom.log_server_interface_attributes        = 0xFFFFFFF - 1;
        app_lvl_max.log_server_interface_attributes           = 0xAAAA;

        app_no_filters.log_server_interface_attributes        = 0xCAFE;

        app_cl_filter_none.log_server_interface_attributes    = 0xCAFE + 1;
        app_cl_filter_assert.log_server_interface_attributes  = 0xCAFE + 2;
        app_cl_filter_fatal.log_server_interface_attributes   = 0xCAFE + 3;
        app_cl_filter_error.log_server_interface_attributes   = 0xCAFE + 4;
        app_cl_filter_warning.log_server_interface_attributes = 0xCAFE + 5;
        app_cl_filter_info.log_server_interface_attributes    = 0xCAFE + 6;
        app_cl_filter_debug.log_server_interface_attributes   = 0xCAFE + 7;
        app_cl_filter_trace.log_server_interface_attributes   = 0xCAFE + 8;
        app_cl_filter_custom.log_server_interface_attributes  = 0xCAFE + 9;

        chanMux.log_server_interface_attributes               = 3001;

        app_lvl_none.log_lvl    = -1;
        app_lvl_assert.log_lvl  = -1;
        app_lvl_fatal.log_lvl   = -1;
        app_lvl_error.log_lvl   = -1;
        app_lvl_warning.log_lvl = -1;
        app_lvl_info.log_lvl    = -1;
        app_lvl_debug.log_lvl   = -1;
        app_lvl_trace.log_lvl   = -1;
        app_lvl_custom.log_lvl  = -1;
        app_lvl_max.log_lvl     = -1;

        app_no_filters.log_lvl  = -1;

        app_cl_filter_none.log_lvl    = 0;
        app_cl_filter_assert.log_lvl  = 1;
        app_cl_filter_fatal.log_lvl   = 2;
        app_cl_filter_error.log_lvl   = 3;
        app_cl_filter_warning.log_lvl = 4;
        app_cl_filter_info.log_lvl    = 5;
        app_cl_filter_debug.log_lvl   = 6;
        app_cl_filter_trace.log_lvl   = 7;
        app_cl_filter_custom.log_lvl  = 9;

        chanMux.log_lvl = 1;

        sendsIllFormattedString.log_server_interface_attributes = 50000;

        logFileReader.log_server_interface_attributes    = 50001;
        fileReaderWriter.log_server_interface_attributes = 50002;

        // timer
        timerDev.reg_paddr = 0xF8001000;    // paddr of mmio registers
        timerDev.reg_size = 0x1000;         // size of mmio registers
        timerDev.irq_ticks_irq_number = 42; // time_server irq number
        timerDev.irq_sleep_irq_number = 43; // time_server irq number
        // assign an initial value to semaphore
        time_server.sem_ticks_value = 0;
        time_server.sem_sleep_value = 0;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        partition_manager.chanMux_rpc_attributes = CHANMUX_ID_PM;

        // UART
        CONFIGURE_INSTANCE_UART(
            uartDrv,
            CFG_CHANMUX_DEFAULT_UART_PHYS_ADDR,
            CFG_CHANMUX_DEFAULT_UART_INTR)
    }
}
